package com.wwh.test.lang;

/**
 * <pre>
 * 位运算
 * </pre>
 * 
 * @author wwh
 * @date 2016年7月11日 上午11:13:06
 */
public class BitTest {

    public static void not() {
        System.out.println(~5);// 结果为-6
        // 5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101
        // -------------------------------------------------------------------------------------
        // -6转换为二进制：1111 1111 1111 1111 1111 1111 1111 1010

        // 位非：操作数的第n位为1，那么结果的第n位为0，反之。
    }

    public static void xor() {
        System.out.println(5 ^ 3);// 结果为6
        // 5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101
        // 3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011
        // -------------------------------------------------------------------------------------
        // 6转换为二进制：0000 0000 0000 0000 0000 0000 0000 0110

        // 位异或：第一个操作数的的第n位于第二个操作数的第n位 相反，那么结果的第n为也为1，否则为0
    }

    public static void or() {
        System.out.println(5 | 3);// 结果为7
        // 5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101
        // 3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011
        // -------------------------------------------------------------------------------------
        // 7转换为二进制：0000 0000 0000 0000 0000 0000 0000 0111
    }

    public static void and() {
        System.out.println(5 & 3);// 结果为1
        // 5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101
        // 3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011
        // -------------------------------------------------------------------------------------
        // 1转换为二进制：0000 0000 0000 0000 0000 0000 0000 0001
    }

    public static void move() {
        // 5换算成二进制： 0000 0000 0000 0000 0000 0000 0000 0101
        // 5右移3位后结果为0，0的二进制为： 0000 0000 0000 0000 0000 0000 0000 0000 //
        // (用0进行补位)
        System.out.println(5 >> 3);// 结果是0

        // -5换算成二进制： 1111 1111 1111 1111 1111 1111 1111 1011
        // -5右移3位后结果为-1，-1的二进制为：
        // 1111 1111 1111 1111 1111 1111 1111 1111 // (用1进行补位)
        System.out.println(-5 >> 3);// 结果是-1

        // -5无符号右移3位后的结果 536870911 换算成二进制：
        // 0001 1111 1111 1111 1111 1111 1111 1111 // (用0进行补位)
        System.out.println(-5 >>> 3);// 结果是536870911

        // 正数右移，高位用0补，负数右移，高位用1补，当负数使用无符号右移时，用0进行补位
    }
}
